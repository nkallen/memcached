


Network Working Group                                   Aaron Stone, Ed.
Internet-Draft                                           Six Apart, Ltd.
Intended status: Informational                         December 14, 2007
Expires: June 16, 2008


                        Memcache Binary Protocol
                     draft-stone-memcache-binary-01

Status of this Memo

   This document is an Internet-Draft and is NOT offered in accordance
   with Section 10 of RFC 2026, and the author does not provide the IETF
   with any rights other than to publish as an Internet-Draft.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF), its areas, and its working groups.  Note that
   other groups may also distribute working documents as Internet-
   Drafts.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   The list of current Internet-Drafts can be accessed at
   http://www.ietf.org/ietf/1id-abstracts.txt.

   The list of Internet-Draft Shadow Directories can be accessed at
   http://www.ietf.org/shadow.html.

   This Internet-Draft will expire on June 16, 2008.

Abstract

   This memo explains the memcache binary protocol for informational
   purposes.

   Memcache is a high performance key-value cache.  It is intentionally
   a dumb cache, optimized for speed only.  Applications using memcache
   do not rely on it for data -- a persistent database with guaranteed
   reliability is strongly recommended -- but applications can run much
   faster when cached data is available in memcache.








Aaron Stone               Expires June 16, 2008                 [Page 1]

Internet-Draft          Memcache Binary Protocol           December 2007


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . intro
     1.1.  Conventions Used In This Document . . . . . . . . . . . conve
   2.  Packet Structure  . . . . . . . . . . . . . . . . . . . . . packe
   3.  Defined Values  . . . . . . . . . . . . . . . . . . . . . . value
     3.1.  Magic Byte  . . . . . . . . . . . . . . . . . . . . . . value
     3.2.  Response Status . . . . . . . . . . . . . . . . . . . . value
     3.3.  Command Opcodes . . . . . . . . . . . . . . . . . . . . value
     3.4.  Data Types  . . . . . . . . . . . . . . . . . . . . . . value
   4.  Commands  . . . . . . . . . . . . . . . . . . . . . . . . . ancho
     4.1.  Get, Get Quietly, Get Key, Get Key Quietly  . . . . . . comma
     4.2.  Delete  . . . . . . . . . . . . . . . . . . . . . . . . comma
     4.3.  Flush . . . . . . . . . . . . . . . . . . . . . . . . . comma
     4.4.  Set, Add, Replace . . . . . . . . . . . . . . . . . . . comma
     4.5.  noop  . . . . . . . . . . . . . . . . . . . . . . . . . comma
     4.6.  Increment, Decrement  . . . . . . . . . . . . . . . . . comma
     4.7.  quit  . . . . . . . . . . . . . . . . . . . . . . . . . comma
     4.8.  Append, Prepend . . . . . . . . . . . . . . . . . . . . comma
   5.  Example Session . . . . . . . . . . . . . . . . . . . . . . ancho
   6.  Security Considerations . . . . . . . . . . . . . . . . . . secur
   7.  Normative References  . . . . . . . . . . . . . . . . . . . ancho
   Appendix A.  Acknowledgments  . . . . . . . . . . . . . . . . . ackno
   Author's Address  . . . . . . . . . . . . . . . . . . . . . . .     0



























Aaron Stone               Expires June 16, 2008                 [Page 2]

Internet-Draft          Memcache Binary Protocol           December 2007


1.  Introduction

   Memcache is a high performance key-value cache.  It is intentionally
   a dumb cache, optimized for speed only.  Applications using memcache
   do not rely on it for data -- a persistent database with guaranteed
   reliability is strongly recommended -- but applications can run much
   faster when cached data is available in memcache.

   Memcache was originally written to make LiveJournal [LJ] go faster.
   It now powers all of the fastest web sites that you love.

1.1.  Conventions Used In This Document

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
   document are to be interpreted as described in [KEYWORDS].


2.  Packet Structure

   General format of a packet:

     Byte/     0       |       1       |       2       |       3       |
        /              |               |               |               |
       |0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|
       +---------------+---------------+---------------+---------------+
      0/ HEADER                                                        /
       /                                                               /
       /                                                               /
       /                                                               /
       +---------------+---------------+---------------+---------------+
     24/ COMMAND-SPECIFIC EXTRAS (as needed)                           /
      +/  (note length in th extras length header field)               /
       +---------------+---------------+---------------+---------------+
      m/ Key (as needed)                                               /
      +/  (note length in key length header field)                     /
       +---------------+---------------+---------------+---------------+
      n/ Value (as needed)                                             /
      +/  (note length is total body length header field, minus        /
      +/   sum of the extras and key length body fields)               /
       +---------------+---------------+---------------+---------------+
      Total 24 bytes









Aaron Stone               Expires June 16, 2008                 [Page 3]

Internet-Draft          Memcache Binary Protocol           December 2007


   Request header:

     Byte/     0       |       1       |       2       |       3       |
        /              |               |               |               |
       |0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|
       +---------------+---------------+---------------+---------------+
      0| Magic         | Opcode        | Key length                    |
       +---------------+---------------+---------------+---------------+
      4| Extras length | Data type     | Reserved                      |
       +---------------+---------------+---------------+---------------+
      8| Total body length                                             |
       +---------------+---------------+---------------+---------------+
     12| Opaque                                                        |
       +---------------+---------------+---------------+---------------+
     16| CAS                                                           |
       |                                                               |
       +---------------+---------------+---------------+---------------+
     Total 24 bytes

   Response header:

     Byte/     0       |       1       |       2       |       3       |
        /              |               |               |               |
       |0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|
       +---------------+---------------+---------------+---------------+
      0| Magic         | Opcode        | Key Length                    |
       +---------------+---------------+---------------+---------------+
      4| Extras length | Data type     | Status                        |
       +---------------+---------------+---------------+---------------+
      8| Total body length                                             |
       +---------------+---------------+---------------+---------------+
     12| Opaque                                                        |
       +---------------+---------------+---------------+---------------+
     16| CAS                                                           |
       |                                                               |
       +---------------+---------------+---------------+---------------+
     Total 24 bytes

   Header fields:
   Magic               Magic number.
   Opcode              Command code.
   Key length          Length in bytes of the text key that follows the
                       command extras.
   Status              Status of the response (non-zero on error).







Aaron Stone               Expires June 16, 2008                 [Page 4]

Internet-Draft          Memcache Binary Protocol           December 2007


   Extras length       Length in bytes of the command extras.
   Data type           Reserved for future use (Sean is using this
                       soon).
   Reserved            Really reserved for future use (up for grabs).
   Total body length   Length in bytes of extra + key + value.
   Opaque              Will be copied back to you in the response.
                       FIXME: Can this be used to organize [UDP]
                       packets?
   CAS                 Data version check


3.  Defined Values

3.1.  Magic Byte

   0x80    Request packet for this protocol version
   0x81    Response packet for this protocol version

   Magic byte / version.  For each version of the protocol, we'll use a
   different request/reponse value pair.  This is useful for protocol
   analyzers to know what a packet is in isolation from which direction
   it is moving.  Note that it is common to run a memcached instance on
   a host that also runs an application server.  Such a host will both
   send and receive memcache packets.

   The version should hopefully correspond only to different meanings of
   the command byte.  In an ideal world, we will not change the header
   format.  As reserved bytes are given defined meaning, the protocol
   version / magic byte values should be incremented.

   Traffic analysis tools are encouraged to identify memcache packets
   and provide detailed interpretation if the magic bytes are recognized
   and otherwise to provide a generic breakdown of the packet.  Note
   that the key and value positions can always be identified even if the
   magic byte or command opcode are not recognized.

3.2.  Response Status

   Possible values of this two-byte field:
   0x0000  No error
   0x0001  Key not found
   0x0002  Key exists
   0x0003  Value too big
   0x0004  Invalid arguments







Aaron Stone               Expires June 16, 2008                 [Page 5]

Internet-Draft          Memcache Binary Protocol           December 2007


   0x0005  Item not stored
   0x0081  Unknown command
   0x0082  Out of memory

3.3.  Command Opcodes

   Possible values of the one-byte field:
   0x00    Get
   0x01    Set
   0x02    Add
   0x03    Replace
   0x04    Delete
   0x05    Increment
   0x06    Decrement
   0x07    Quit
   0x08    Flush
   0x09    GetQ
   0x0A    No-op
   0x0B    Version
   0x0C    GetK
   0x0D    GetKQ
   0x0E    Append
   0x0F    Prepend

3.4.  Data Types

   Possible values of the one-byte field:
   0x00    Raw bytes


4.  Commands

4.1.  Get, Get Quietly, Get Key, Get Key Quietly

   Request:

      MUST NOT have extras.
      MUST have key.
      MUST NOT have value.

   o  4 byte flags

   Response (if found):

      MUST have extras.
      MAY have key.





Aaron Stone               Expires June 16, 2008                 [Page 6]

Internet-Draft          Memcache Binary Protocol           December 2007


      MAY have value.

   o  4 byte flags

   Extra data for the get commands:

     Byte/     0       |       1       |       2       |       3       |
        /              |               |               |               |
       |0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|
       +---------------+---------------+---------------+---------------+
      0| Flags                                                         |
       +---------------+---------------+---------------+---------------+
     Total 4 bytes

   The get command gets a single key.  The getq command is both mum on
   cache miss and quiet, holding its response until a non-quiet command
   is issued.  Getk and getkq differs from get and getq by adding the
   key into the resonse packet.

   You're not guaranteed a response to a getq/getkq cache hit until you
   send a non-getq/getkq command later, which uncorks the server which
   bundles up IOs to send to the client in one go.

   Clients should implement multi-get (still important for reducing
   network roundtrips!) as n pipelined requests, the first n-1 being
   getq/getkq, the last being a regular get/getk. that way you're
   guaranteed to get a response, and you know when the server's done.
   you can also do the naive thing and send n pipelined get/getks, but
   then you could potentially get back a lot of "NOT_FOUND!" error code
   packets. alternatively, you can send 'n' getq/getkqs, followed by an
   'echo' or 'noop' command.

4.2.  Delete

      MAY have extras
      MUST have key.
      MUST NOT have value.

   o  4 byte expiration time












Aaron Stone               Expires June 16, 2008                 [Page 7]

Internet-Draft          Memcache Binary Protocol           December 2007


   Extra data for delete:

     Byte/     0       |       1       |       2       |       3       |
        /              |               |               |               |
       |0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|
       +---------------+---------------+---------------+---------------+
      0| Expiration                                                    |
       +---------------+---------------+---------------+---------------+
     Total 4 bytes

   When allows you to 'reserve' a key.  When 'when' is set for, say, ten
   seconds in the future, the 'add' and 'replace' operations will fail
   for that key until ten seconds from now.  The 'set' operation will
   succeed regardless of any reserved deletes.  FIXME: Is the
   reservation also cancelled?  Say there's a delete with a 10 second
   hold.  Two seconds later, an 'add' is received.  It fails.  Two
   second later, a 'set' is received.  Is succeeds unconditionally.
   What if another 'add' is received two more seconds later (a total of
   six seconds since the original 10 second delete-hold, thus still
   within its purview).

4.3.  Flush

      MAY have extras
      MUST NOT have key.
      MUST NOT have value.

   o  4 byte expiration time

   Extra data for flush:

     Byte/     0       |       1       |       2       |       3       |
        /              |               |               |               |
       |0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|
       +---------------+---------------+---------------+---------------+
      0| Expiration                                                    |
       +---------------+---------------+---------------+---------------+
     Total 4 bytes

   Flush the items in the cache now or sometime in the future specified
   by the expiration field.  See the documentation of the textual
   protocol for the full description on how to specify the expiration
   time.

4.4.  Set, Add, Replace






Aaron Stone               Expires June 16, 2008                 [Page 8]

Internet-Draft          Memcache Binary Protocol           December 2007


      MUST have extras.
      MUST have key.
      MUST have value.

   o  4 byte flags
   o  4 byte expiration time

   Extra data for set/add/replace:

     Byte/     0       |       1       |       2       |       3       |
        /              |               |               |               |
       |0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|
       +---------------+---------------+---------------+---------------+
      0| Flags                                                         |
       +---------------+---------------+---------------+---------------+
      4| Expiration                                                    |
       +---------------+---------------+---------------+---------------+
     Total 8 bytes

   If the Data Version Check is present and nonzero, the set MUST
   succeed if the key exists and has a version identifier identical to
   the provided value, and MUST NOT succeed if the key does not exist or
   has a different version identifier.  The set response packet will
   include the same values in all three fields.

   If the CAS field in the header is zero, the set MUST succeed
   unconditionally.  The set response packet will include idential
   values for flags and expiration, and a new value for Data Version
   Check, which the client SHOULD keep track of.

   The key MAY be reserved according to Section 4.2, causing the set to
   fail.

4.5.  noop

      MUST NOT have extras.
      MUST NOT have key.
      MUST NOT have value.

   Used as a keep alive.  Flushes outstanding getq/getkq's.

4.6.  Increment, Decrement

      MUST have extras.
      MUST have key.
      MUST NOT have value.





Aaron Stone               Expires June 16, 2008                 [Page 9]

Internet-Draft          Memcache Binary Protocol           December 2007


   o  8 byte value to add / subtract (FIXME: Is this unsigned?)
   o  8 byte initial value (unsigned)
   o  4 byte expiration time

   Extra data for incr/decr:

     Byte/     0       |       1       |       2       |       3       |
        /              |               |               |               |
       |0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|
       +---------------+---------------+---------------+---------------+
      0| Amount to add                                                 |
       |                                                               |
       +---------------+---------------+---------------+---------------+
      8| Initial value                                                 |
       |                                                               |
       +---------------+---------------+---------------+---------------+
     16| Expiration                                                    |
       +---------------+---------------+---------------+---------------+
     Total 20 bytes

   incr/decr response body:

     Byte/     0       |       1       |       2       |       3       |
        /              |               |               |               |
       |0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|
       +---------------+---------------+---------------+---------------+
      0| 64-bit unsigned response.                                     |
       |                                                               |
       +---------------+---------------+---------------+---------------+
     Total 8 bytes

   These commands will either add or remove the specified amount to the
   requested counter.  If the counter does not exist, one of two things
   may happen:
   1.  If the expiration value is all one-bits (0xffffffff), the
       operation will fail with NOT_FOUND.
   2.  For all other expiration values, the operation will succeed by
       seeding the value for this key with the provided initial value to
       expire with the provided expiration time.

   Note that in the creation case, flags will be set to zero (FIXME:
   Should they be provided here as well?)

4.7.  quit

      MUST NOT have extras.





Aaron Stone               Expires June 16, 2008                [Page 10]

Internet-Draft          Memcache Binary Protocol           December 2007


      MUST NOT have key.
      MUST NOT have value.

   Close the connection to the server.

4.8.  Append, Prepend

      MUST NOT have extras.
      MUST have key.
      MUST have value.

   These commands will either append or prepend the specified value to
   the requested key.

   Please note that the CAS field in the header must match the CAS
   version of the requested item.


5.  Example Session

   We start up our application, and asks for the value associated with
   the 'Hello' key.  To send the get request, the following values must
   be inserted in the header (in network byte order): Field (offset)
   (value) Magic (0) : 0x80 Opcode (1) : 0x00 Key length (2,3) : 0x0005
   Extra length (4) : 0x00 Data type (5) : 0x00 Reserved (6,7) : 0x0000
   Total body (8-11) : 0x00000005 Opaque (12-15): 0x00000000 CAS
   (16-23): 0x0000000000000000 Extras : None Key (24-29): The textual
   string: "Hello" Value : None The packet looks like:























Aaron Stone               Expires June 16, 2008                [Page 11]

Internet-Draft          Memcache Binary Protocol           December 2007


   Get request:


     Byte/     0       |       1       |       2       |       3       |
        /              |               |               |               |
       |0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|
       +---------------+---------------+---------------+---------------+
      0| 0x80          | 0x00          | 0x00          | 0x05          |
       +---------------+---------------+---------------+---------------+
      4| 0x00          | 0x00          | 0x00          | 0x00          |
       +---------------+---------------+---------------+---------------+
      8| 0x00          | 0x00          | 0x00          | 0x05          |
       +---------------+---------------+---------------+---------------+
     12| 0x00          | 0x00          | 0x00          | 0x00          |
       +---------------+---------------+---------------+---------------+
     16| 0x00          | 0x00          | 0x00          | 0x00          |
       +---------------+---------------+---------------+---------------+
     20| 0x00          | 0x00          | 0x00          | 0x00          |
       +---------------+---------------+---------------+---------------+
     24| 0x48 ('H')    | 0x65 ('e')    | 0x6c ('l')    | 0x6c ('l')    |
       +---------------+---------------+---------------+---------------+
     28| 0x6f ('o')    |
       +---------------+

       Total 29 bytes (24 byte header, and 5 bytes key)

   Since nobody has set this key yet, it returns "Not found".
























Aaron Stone               Expires June 16, 2008                [Page 12]

Internet-Draft          Memcache Binary Protocol           December 2007


   Get response:


     Byte/     0       |       1       |       2       |       3       |
        /              |               |               |               |
       |0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|
       +---------------+---------------+---------------+---------------+
      0| 0x81          | 0x00          | 0x00          | 0x00          |
       +---------------+---------------+---------------+---------------+
      4| 0x00          | 0x00          | 0x00          | 0x01          |
       +---------------+---------------+---------------+---------------+
      8| 0x00          | 0x00          | 0x00          | 0x09          |
       +---------------+---------------+---------------+---------------+
     12| 0x00          | 0x00          | 0x00          | 0x00          |
       +---------------+---------------+---------------+---------------+
     16| 0x00          | 0x00          | 0x00          | 0x00          |
       +---------------+---------------+---------------+---------------+
     20| 0x00          | 0x00          | 0x00          | 0x00          |
       +---------------+---------------+---------------+---------------+
     24| 0x4e ('N')    | 0x6f ('o')    | 0x74 ('t')    | 0x20 (' ')    |
       +---------------+---------------+---------------+---------------+
     28| 0x66 ('f')    | 0x6f ('o')    | 0x75 ('u')    | 0x6e ('n')    |
       +---------------+---------------+---------------+---------------+
     32| 0x64 ('d')    |
       +---------------+

       Total 33 bytes (24 byte header, and 9 bytes value)

   The above packet is interpreted as: Field (offset) (value) Magic (0)
   : 0x81 Opcode (1) : 0x00 Key length (2,3) : 0x0000 Extra length (4) :
   0x00 Data type (5) : 0x00 Status (6,7) : 0x0001 Total body (8-11) :
   0x00000009 Opaque (12-15): 0x00000000 CAS (16-23): 0x0000000000000000
   Extras : None Key : None Value (24-32): The textual string "Not
   found"

   Well, looks like we need to add the key!  Let's set it to "World"
   with 0xdeadbeef as flags and to expire in two hours.  The following
   values should be inserted into the header: Field (offset) (value)
   Magic (0) : 0x80 Opcode (1) : 0x02 Key length (2,3) : 0x0005 Extra
   length (4) : 0x08 Data type (5) : 0x00 Reserved (6,7) : 0x0000 Total
   body (8-11) : 0x00000012 Opaque (12-15): 0x00000000 CAS (16-23):
   0x0000000000000000 Extras : Flags (24-27): 0xdeadbeef Expiry (28-31):
   0x00000e10 Key (32-36): The textual string "Hello" Value (37-41): The
   textual string "World" The packet looks like:







Aaron Stone               Expires June 16, 2008                [Page 13]

Internet-Draft          Memcache Binary Protocol           December 2007


   Add request:


    Byte/     0       |       1       |       2       |       3       |
       /              |               |               |               |
      |0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|0 1 2 3 4 5 6 7|
      +---------------+---------------+---------------+---------------+
     0| 0x80          | 0x02          | 0x00          | 0x05          |
      +---------------+---------------+---------------+---------------+
     4| 0x08          | 0x00          | 0x00          | 0x00          |
      +---------------+---------------+---------------+---------------+
     8| 0x00          | 0x00          | 0x00          | 0x12          |
      +---------------+---------------+---------------+---------------+
    12| 0x00          | 0x00          | 0x00          | 0x00          |
      +---------------+---------------+---------------+---------------+
    16| 0x00          | 0x00          | 0x00          | 0x00          |
      +---------------+---------------+---------------+---------------+
    20| 0x00          | 0x00          | 0x00          | 0x00          |
      +---------------+---------------+---------------+---------------+
    24| 0xde          | 0xad          | 0xbe          | 0xef          |
      +---------------+---------------+---------------+---------------+
    28| 0x00          | 0x00          | 0x0e          | 0x10          |
      +---------------+---------------+---------------+---------------+
    32| 0x48 ('H')    | 0x65 ('e')    | 0x6c ('l')    | 0x6c ('l')    |
      +---------------+---------------+---------------+---------------+
    36| 0x6f ('o')    | 0x57 ('W')    | 0x6f ('o')    | 0x72 ('r')    |
      +---------------+---------------+---------------+---------------+
    40| 0x6c ('l')    | 0x64 ('d')    |
      +---------------+---------------+

      Total 42 bytes (24 byte header, 8 byte extras, 5 byte key and 5 byte value)
